// frontend/src/utils/templateDownload.ts - UTILIDADES PARA PLANTILLAS
import * as XLSX from 'xlsx';

export interface TemplateConfig {
  fileName: string;
  sheetName: string;
  headers: string[];
  sampleData: Record<string, any>[];
  instructions: string[];
}

// Configuraciones de plantillas para cada tipo de entidad
export const TEMPLATE_CONFIGS: Record<string, TemplateConfig> = {
  voters: {
    fileName: 'Plantilla_Votantes_GEMINI.xlsx',
    sheetName: 'Votantes',
    headers: [
      'c√©dula',
      'nombres', 
      'apellidos',
      'celular',
      'direcci√≥n',
      'barrio',
      'fecha de expedici√≥n'
    ],
    sampleData: [
      {
        'c√©dula': '12345678',
        'nombres': 'Juan Carlos',
        'apellidos': 'P√©rez Garc√≠a',
        'celular': '3001234567',
        'direcci√≥n': 'Calle 123 #45-67',
        'barrio': 'El Prado',
        'fecha de expedici√≥n': '15/05/2010'
      },
      {
        'c√©dula': '87654321',
        'nombres': 'Mar√≠a Fernanda',
        'apellidos': 'Gonz√°lez L√≥pez',
        'celular': '3009876543',
        'direcci√≥n': 'Carrera 50 #80-25',
        'barrio': 'La Concepci√≥n',
        'fecha de expedici√≥n': '20/03/2008'
      },
      {
        'c√©dula': '11223344',
        'nombres': 'Carlos Alberto',
        'apellidos': 'Rodr√≠guez Mart√≠nez',
        'celular': '3151122334',
        'direcci√≥n': 'Avenida 15 #30-45',
        'barrio': 'Centro',
        'fecha de expedici√≥n': '10/12/2015'
      }
    ],
    instructions: [
      'üéØ PLANTILLA PARA IMPORTAR VOTANTES EN GEMINI',
      '',
      'üìã CAMPOS OBLIGATORIOS (marcados con *):',
      '   ‚úì c√©dula: N√∫mero de identificaci√≥n sin puntos ni espacios',
      '   ‚úì nombres: Nombres completos de la persona',
      '   ‚úì apellidos: Apellidos completos de la persona',
      '',
      'üìù CAMPOS OPCIONALES:',
      '   ‚Ä¢ celular: N√∫mero de tel√©fono celular',
      '   ‚Ä¢ direcci√≥n: Direcci√≥n completa de residencia',
      '   ‚Ä¢ barrio: Barrio o sector donde vive',
      '   ‚Ä¢ fecha de expedici√≥n: Fecha cuando se expidi√≥ la c√©dula',
      '',
      'üìê FORMATOS IMPORTANTES:',
      '   ‚Ä¢ C√©dula: Solo n√∫meros (ejemplo: 12345678)',
      '   ‚Ä¢ Fechas: DD/MM/YYYY (ejemplo: 15/05/2010)',
      '   ‚Ä¢ Celular: Con c√≥digo de √°rea (ejemplo: 3001234567)',
      '',
      'üí° CONSEJOS PARA EVITAR ERRORES:',
      '   ‚Ä¢ No dejes filas vac√≠as entre datos',
      '   ‚Ä¢ No modifiques los nombres de las columnas',
      '   ‚Ä¢ Revisa que no haya c√©dulas duplicadas',
      '   ‚Ä¢ M√°ximo 10,000 registros por archivo',
      '   ‚Ä¢ Usa formato Excel (.xlsx) para mejor compatibilidad',
      '',
      'üöÄ PROCESO DE IMPORTACI√ìN:',
      '   1. Llena esta plantilla con tus datos',
      '   2. Guarda el archivo como Excel (.xlsx)',
      '   3. S√∫belo en la p√°gina de importaci√≥n de GEMINI',
      '   4. El sistema detectar√° autom√°ticamente los campos',
      '   5. Revisa el mapeo y confirma la importaci√≥n',
      '',
      '‚ùì ¬øNECESITAS AYUDA?',
      '   ‚Ä¢ Contacta al soporte t√©cnico de GEMINI',
      '   ‚Ä¢ Revisa la documentaci√≥n en l√≠nea',
      '   ‚Ä¢ Usa los ejemplos incluidos como gu√≠a'
    ]
  },
  leaders: {
    fileName: 'Plantilla_Lideres_GEMINI.xlsx',
    sheetName: 'L√≠deres',
    headers: [
      'c√©dula',
      'nombres',
      'apellidos', 
      'celular',
      'email',
      'direcci√≥n',
      'barrio',
      'meta de votantes'
    ],
    sampleData: [
      {
        'c√©dula': '11223344',
        'nombres': 'Carlos Alberto',
        'apellidos': 'Rodr√≠guez Mart√≠nez',
        'celular': '3001122334',
        'email': 'carlos.rodriguez@email.com',
        'direcci√≥n': 'Carrera 50 #80-25',
        'barrio': 'La Concepci√≥n',
        'meta de votantes': '50'
      },
      {
        'c√©dula': '55667788',
        'nombres': 'Ana Patricia',
        'apellidos': 'Gonz√°lez L√≥pez',
        'celular': '3009988776',
        'email': 'ana.gonzalez@email.com',
        'direcci√≥n': 'Calle 70 #45-30',
        'barrio': 'El Prado',
        'meta de votantes': '75'
      }
    ],
    instructions: [
      'üë§ PLANTILLA PARA IMPORTAR L√çDERES EN GEMINI',
      '',
      'üìã CAMPOS OBLIGATORIOS:',
      '   ‚úì c√©dula, nombres, apellidos',
      '',
      'üìù CAMPOS RECOMENDADOS:',
      '   ‚Ä¢ celular, email, meta de votantes',
      '',
      'üìê FORMATOS ESPECIALES:',
      '   ‚Ä¢ Meta de votantes: Solo n√∫meros (ejemplo: 50)',
      '   ‚Ä¢ Email: formato v√°lido (ejemplo@dominio.com)',
      '',
      'üí° NOTA: Los l√≠deres pueden gestionar votantes y tienen metas espec√≠ficas.'
    ]
  },
  candidates: {
    fileName: 'Plantilla_Candidatos_GEMINI.xlsx',
    sheetName: 'Candidatos',
    headers: [
      'nombre completo',
      'email',
      'celular',
      'cargo',
      'partido pol√≠tico',
      'meta de votos'
    ],
    sampleData: [
      {
        'nombre completo': 'Ana Patricia Mendoza Ruiz',
        'email': 'ana.mendoza@campa√±a.com',
        'celular': '3151234567',
        'cargo': 'Alcaldesa',
        'partido pol√≠tico': 'Partido Progresista',
        'meta de votos': '50000'
      },
      {
        'nombre completo': 'Carlos Alberto Rodr√≠guez',
        'email': 'carlos.rodriguez@campa√±a.com',
        'celular': '3129876543',
        'cargo': 'Concejal',
        'partido pol√≠tico': 'Partido Democr√°tico',
        'meta de votos': '15000'
      }
    ],
    instructions: [
      'üéñÔ∏è PLANTILLA PARA IMPORTAR CANDIDATOS EN GEMINI',
      '',
      'üìã CAMPOS OBLIGATORIOS:',
      '   ‚úì nombre completo, email',
      '',
      'üìê FORMATOS:',
      '   ‚Ä¢ Meta de votos: Solo n√∫meros (ejemplo: 50000)',
      '   ‚Ä¢ Email: Debe ser v√°lido y √∫nico'
    ]
  },
  groups: {
    fileName: 'Plantilla_Grupos_GEMINI.xlsx',
    sheetName: 'Grupos',
    headers: [
      'nombre del grupo',
      'descripci√≥n',
      'zona geogr√°fica',
      'meta de votantes'
    ],
    sampleData: [
      {
        'nombre del grupo': 'Coordinaci√≥n Norte',
        'descripci√≥n': 'Grupo de trabajo zona norte de la ciudad',
        'zona geogr√°fica': 'Norte',
        'meta de votantes': '500'
      },
      {
        'nombre del grupo': 'Equipo Centro',
        'descripci√≥n': 'Coordinaci√≥n del centro hist√≥rico',
        'zona geogr√°fica': 'Centro',
        'meta de votantes': '300'
      }
    ],
    instructions: [
      'üèõÔ∏è PLANTILLA PARA IMPORTAR GRUPOS EN GEMINI',
      '',
      'üìã CAMPO OBLIGATORIO:',
      '   ‚úì nombre del grupo',
      '',
      'üìê FORMATOS:',
      '   ‚Ä¢ Meta de votantes: Solo n√∫meros (ejemplo: 500)',
      '   ‚Ä¢ Zona geogr√°fica: Texto descriptivo'
    ]
  }
};

// Funci√≥n principal para descargar plantilla
export function downloadExcelTemplate(entityType: string): void {
  const config = TEMPLATE_CONFIGS[entityType];
  
  if (!config) {
    console.error(`No existe configuraci√≥n de plantilla para: ${entityType}`);
    return;
  }

  try {
    // Crear workbook
    const workbook = XLSX.utils.book_new();
    
    // Crear worksheet principal con datos de ejemplo
    const worksheet = XLSX.utils.json_to_sheet(config.sampleData);
    
    // Configurar anchos de columna
    const columnWidths = config.headers.map(header => ({
      wch: getColumnWidth(header)
    }));
    worksheet['!cols'] = columnWidths;
    
    // Crear worksheet de instrucciones
    const instructionsData = config.instructions.map(instruction => ({ 
      'INSTRUCCIONES': instruction 
    }));
    const instructionsWorksheet = XLSX.utils.json_to_sheet(instructionsData);
    instructionsWorksheet['!cols'] = [{ wch: 80 }];
    
    // Agregar hojas al workbook
    XLSX.utils.book_append_sheet(workbook, worksheet, config.sheetName);
    XLSX.utils.book_append_sheet(workbook, instructionsWorksheet, 'Instrucciones');
    
    // Descargar archivo
    XLSX.writeFile(workbook, config.fileName);
    
    console.log(`‚úÖ Plantilla descargada: ${config.fileName}`);
    
  } catch (error) {
    console.error('Error descargando plantilla:', error);
    alert('Error al generar la plantilla. Por favor intenta nuevamente.');
  }
}

// Funci√≥n auxiliar para determinar ancho de columna
function getColumnWidth(header: string): number {
  const widthMap: Record<string, number> = {
    'c√©dula': 12,
    'nombres': 20,
    'apellidos': 20,
    'nombre completo': 25,
    'celular': 12,
    'direcci√≥n': 30,
    'email': 25,
    'fecha de expedici√≥n': 15,
    'barrio': 15,
    'cargo': 15,
    'partido pol√≠tico': 20,
    'meta de votantes': 12,
    'meta de votos': 12,
    'zona geogr√°fica': 15,
    'descripci√≥n': 40,
    'nombre del grupo': 20
  };
  
  return widthMap[header.toLowerCase()] || 15;
}

// Funci√≥n para obtener etiqueta amigable del tipo de entidad
export function getEntityLabel(entityType: string): string {
  const labels: Record<string, string> = {
    voters: 'Votantes',
    leaders: 'L√≠deres', 
    candidates: 'Candidatos',
    groups: 'Grupos'
  };
  
  return labels[entityType] || entityType;
}

// Funci√≥n para obtener informaci√≥n sobre la plantilla
export function getTemplateInfo(entityType: string): { 
  requiredFields: string[], 
  optionalFields: string[], 
  totalSampleRows: number,
  fileName: string 
} {
  const config = TEMPLATE_CONFIGS[entityType];
  
  if (!config) {
    return {
      requiredFields: [],
      optionalFields: [],
      totalSampleRows: 0,
      fileName: ''
    };
  }

  // Determinar campos obligatorios y opcionales seg√∫n el tipo
  let requiredFields: string[] = [];
  let optionalFields: string[] = [];

  switch (entityType) {
    case 'voters':
      requiredFields = ['c√©dula', 'nombres', 'apellidos'];
      optionalFields = ['celular', 'direcci√≥n', 'barrio', 'fecha de expedici√≥n'];
      break;
    case 'leaders':
      requiredFields = ['c√©dula', 'nombres', 'apellidos'];
      optionalFields = ['celular', 'email', 'direcci√≥n', 'barrio', 'meta de votantes'];
      break;
    case 'candidates':
      requiredFields = ['nombre completo', 'email'];
      optionalFields = ['celular', 'cargo', 'partido pol√≠tico', 'meta de votos'];
      break;
    case 'groups':
      requiredFields = ['nombre del grupo'];
      optionalFields = ['descripci√≥n', 'zona geogr√°fica', 'meta de votantes'];
      break;
  }

  return {
    requiredFields,
    optionalFields,
    totalSampleRows: config.sampleData.length,
    fileName: config.fileName
  };
}

// Hook personalizado para usar en componentes React
export function useTemplateDownload() {
  const downloadTemplate = (entityType: string) => {
    downloadExcelTemplate(entityType);
  };

  const getTemplateDetails = (entityType: string) => {
    return getTemplateInfo(entityType);
  };

  return {
    downloadTemplate,
    getTemplateDetails,
    getEntityLabel
  };
}